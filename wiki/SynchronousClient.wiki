Create a synchronous client stub and make a synchronous call.

= Introduction =

Create a synchronous client stub and make a synchronous call.


= Details =

Here is an example:
{{{
	public static void main(String[] args) throws IOException {
		SyncMissianProxyFactory factory = new SyncMissianProxyFactory(TransportProtocol.tcp);
		factory.setReadTimeout(100);
		factory.setSocketPool(new CommonSocketPool(factory));
		Hello hello = (Hello)factory.create(Hello.class, "tcp://localhost:1235/hello", Thread.currentThread().getContextClassLoader());
		System.out.println(hello.hello("hy", 27));
	}
}}}

You notice that the SyncMissianProxyFactory accept only one contruct argument: TransportProtocol. TransportProtocol.tcp is the only one that's implemented, and I'm planning to implement TransportProtocol.http.

With this constructor, all the socket will not be keep-alive, and will be closed when the response is received. If you want the socket's keepAlive, another constructor is useful:
{{{
public SyncMissianProxyFactory(TransportProtocol transport, SocketPool socketPool){}
}}}
Yes, a SocketPool is required and missian provide a default implementation CommonSocketPool(based on apache commons-pool).

CommonSocketPool has two constructor:
One accept one SyncMissianProxyFactory argument, and the pool parameters will be default.
{{{
public CommonSocketPool(SyncMissianProxyFactory syncMissianProxyFactory){}
}}}
One accept one more argument:GenericKeyedObjectPool.Config. You can set configure as you want.